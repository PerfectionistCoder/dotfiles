#!/usr/bin/env bash

set -e

prog=$0

print_error() {
  local err
  local desc
  if (($# > 1)); then
    err=$1
    desc=$2
  else
    err="error"
    desc=$1
  fi

  echo $prog: $err: $desc
  exit 1
}

push() {
  id="age.id"
  if [[ -z $pub_key ]]; then
    if [[ -f $id ]]; then
      reci=$(<$id)
    else
      print_error "cannot encrypt" "provide a recipient key with option -k"
    fi
  else
    reci=$pub_key
    echo $reci >|$id
  fi

  rclone sync "$backup" $temp --exclude .git/ --exclude $encrypt_dir

  if [[ -d "$encrypt_dir" ]]; then
    for file in "$encrypt_dir"/*; do
      if [[ ! -f $file ]]; then
        print_error "cannot encrypt" "only files are allowed in $encrypt_dir/"
      fi
      age -r $reci -o "$temp/$file" "$file"
    done
  fi

  rclone sync $temp "$remote"
}

pull() {
  if [[ ! -d ".git" ]]; then
    git init
    git config user.name backup
    git config user.email backup
  fi
  git add .
  git commit -m "$(date '+%m/%d/%y %I:%M:%S%p')"

  rclone sync "$remote" "$backup" --exclude .git/

  if [[ -d "$encrypt_dir" ]]; then
    mv "$encrypt_dir"/* $temp
    cd $temp
    for file in *; do
      if [[ -f $file ]]; then
        age -d -i ${pub_key:-~/.age/*} -o "$backup/$encrypt_dir/$file" "$file"
      fi
    done
  fi
}

backup=$RCLONE_BACKUP_DIR
remote=$RCLONE_REMOTE
command=
pub_key=

while [[ -n $1 ]]; do
  case $1 in
  push)
    command=push
    ;;
  pull)
    command=pull
    ;;
  -d)
    shift
    backup=$1
    ;;
  -r)
    shift
    remote=$1
    ;;
  -k)
    shift
    pub_key=$1
    ;;
  -*)
    print_error "invalid option"
    ;;
  *)
    print_error "invalid command"
    ;;
  esac

  shift
done

if [[ -z "$command" ]]; then
  print_error "missing subcommand"
fi

if [[ ! -d "$backup" ]]; then
  mkdir -p "$backup"
fi
cd "$backup"

temp="/tmp/${prog##/*/}"
mkdir $temp
trap "rm -rf $temp" EXIT
encrypt_dir=secrets
case "$command" in
push)
  push
  ;;
pull)
  pull
  ;;
esac
